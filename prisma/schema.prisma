generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(uuid())
  username              String
  createdAt             DateTime           @default(now())
  walletAddress         String             @unique
  email                 String             @unique
  name                  String             @default("Unknown")
  surnames              String             @default("Unknown")
  description           String?            @default("")
  image                 String             @default("https://github-production-user-asset-6210df.s3.amazonaws.com/115122095/418201084-4f10021b-e424-42bb-bc55-62c98541afad.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAVCODYLSA53PQK4ZA%2F20250228%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250228T234456Z&X-Amz-Expires=300&X-Amz-Signature=58a7f5ec28dafb99e72ca05f14eca5ccc62c1fed82e58ad73c86a35c15b0522e&X-Amz-SignedHeaders=host")
  chatParticipants      ChatParticipants[]
  clicks                Click[]
  comments              Comment[]
  commentLikes          CommentLike[]
  following             Follow[]           @relation("FollowerRelation")
  followers             Follow[]           @relation("FollowingRelation")
  likes                 Like[]
  messages              Message[]
  receivedNotifications Notification[]     @relation("RecipientNotifications")
  sentNotifications     Notification[]     @relation("SenderNotifications")
  posts                 Post[]
  sessions              Session?
}


model Chat {
  id           String             @id @default(uuid())
  createdAt    DateTime           @default(now())
  participants ChatParticipants[]
  messages     Message[]
}

model ChatParticipants {
  id     String @id @default(uuid())
  chatId String
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
}

model Message {
  id        String   @id @default(uuid())
  senderId  String
  content   String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Post {
  id        String    @id @default(uuid())
  content   String
  userId    String
  createdAt DateTime  @default(now())
  title     String
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id           String        @id @default(uuid())
  content      String
  userId       String
  postId       String
  createdAt    DateTime      @default(now())
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentLikes CommentLike[]
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Notification {
  id          String   @id @default(uuid())
  recipientId String
  senderId    String
  type        String
  postId      String?
  commentId   String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  recipient   User     @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User     @relation("SenderNotifications", fields: [senderId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Click {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  isJar     Boolean  @default(false)
  email     String
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
}
