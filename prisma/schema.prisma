generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String
  name      String  @default("Unknown")
  surnames  String  @default("Unknown")
  walletAddress String @unique
  email     String  @unique
  createdAt DateTime @default(now())

  sessions  Session[]
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  commentLikes CommentLike[]

  chatParticipants ChatParticipants[]
  messages         Message[]

  sentNotifications     Notification[] @relation(name: "SenderNotifications")
  receivedNotifications Notification[] @relation(name: "RecipientNotifications")

  followers Follow[] @relation(name: "FollowingRelation")
  following Follow[] @relation(name: "FollowerRelation")

  clicks Click[]
}

model Chat {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  
  participants ChatParticipants[]
  messages     Message[]
}

model ChatParticipants {
  id     String @id @default(uuid())
  chatId String
  userId String

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId]) // Evita duplicaci√≥n de usuarios en un chat
}

model Message {
  id        String   @id @default(uuid())
  content   String
  senderId  String
  chatId    String
  createdAt DateTime @default(now())

  sender    User  @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat      Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower   User @relation(name: "FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following  User @relation(name: "FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Un usuario solo puede dar like una vez
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentLikes CommentLike[]
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId]) // Un usuario solo puede dar like una vez
}

model Notification {
  id          String   @id @default(uuid())
  recipientId String
  senderId    String
  type        String // "LIKE_POST", "NEW_COMMENT"
  postId      String?
  commentId   String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  recipient User @relation(name: "RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  sender    User @relation(name: "SenderNotifications", fields: [senderId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Click {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
  isJar     Boolean  @default(false)

  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
}