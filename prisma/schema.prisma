generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Ensure a user can only like a post once
}

model User {
  id            String        @id @default(uuid())
  username      String
  walletAddress String        @unique
  email         String        @unique
  password      String
  createdAt     DateTime      @default(now())
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  CommentLike   CommentLike[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId]) // Ensure a user can only like a comment once
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentLikes CommentLike[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}